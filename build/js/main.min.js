"use strict";window.addEventListener("DOMContentLoaded",function(){!function(){ymaps.ready(function(){(e=new ymaps.Map("yandex-map",{center:[55.753595,37.621031],zoom:16})).behaviors.disable("scrollZoom"),e.behaviors.disable("drag"),e.events.add("click",function(){e.behaviors.enable("scrollZoom"),e.behaviors.enable("drag")}),t=new ymaps.Placemark([55.753595,37.621031],{},{iconLayout:"default#image",iconImageSize:[20,20]}),e.geoObjects.add(t)});var e=void 0,t=void 0}(),function(){var e=$("#menu__button"),t=$(".nav-list"),n=$(".nav__link"),a="nav-list--active";function o(){e.hasClass("active")?e.removeClass("active"):e.addClass("active")}e.on("click",function(e){e.preventDefault(),t.toggleClass(a),o(),console.log("Yes")}),n.on("click",function(){t.removeClass(a),o()}),$(window).resize(function(){1024<$(window).width()&&(t.removeAttr("style"),t.removeClass(a),e.hasClass("active")&&e.removeClass("active"))})}(),$("#slick").slick({dots:!1,infinite:!1,speed:1e3,touchMove:!0,autoplay:!0,slidesToShow:1,slidesToScroll:1,draggable:!0,pauseOnHover:!0,prevArrow:'<button type="button" class="slick-arrow slick-prev"><span>Previous</span></button>',nextArrow:'<button type="button" class="slick-arrow slick-next"><span>Next</span></button>',responsive:[{breakpoint:600,settings:{arrows:!1}}]}),function(){var e=document.getElementById("square"),t=document.getElementById("lamps"),n=document.querySelectorAll(".calc-checkbox__item"),a=document.querySelector(".calc__btn"),o=document.getElementById("total"),r=document.querySelector(".square-warning"),d=document.querySelector(".lamps-warning"),l=void 0,u=0,v=0,y=0;function s(e,t){var n=document.getElementById(e);if(n){var a=n.value;t.test(a)||(a=""),setInterval(function(){var e=n.value;e!=a&&(t.test(e)?a=e:n.value=a)},10)}}s("square",/^[0-9]+[.]?[0-9]*$/),s("lamps",/^[0-9]?[0-9]*$/),e.addEventListener("keyup",function(){v=e.value,r.style.display="",d.style.display="",o.textContent=0,u=l*v+50*y}),t.addEventListener("keyup",function(){y=t.value,r.style.display="",d.style.display="",o.textContent=0,u=l*v+50*y}),function(){for(var e=function(e){n[e].checked&&(l=n[e].value),n[e].addEventListener("change",function(){o.textContent=0,l=n[e].value,u=l*v+50*y})},t=0;t<n.length;t++)e(t)}(),a.addEventListener("click",function(){var e,t,n,a,o,l,s,i,c;""==v&&""==y?(u=0,r.style.display="block",d.style.display="block"):0==v&&0==y?(u=0,r.style.display="block",d.style.display="block"):""==v||0==v?(u=0,r.style.display="block"):""==y||0==y?(u=0,d.style.display="block"):(r.style.display="",d.style.display="",e="total",a=3e3,o=(n=u)-(t=0),l=t,s=Math.abs(Math.floor(a/o)),i=document.getElementById(e),c=setInterval(function(){l+=50,i.textContent=l,n<=l&&clearInterval(c)},s))})}(),$("nav a,a[href='#top'],a[rel='m_PageScroll2id'],a.PageScroll2id").mPageScroll2id({highlightSelector:"nav a"}),(new WOW).init(),$(window).scroll(function(){700<$(this).scrollTop()?$("#toTop").fadeIn():$("#toTop").fadeOut()}),$("#toTop").click(function(){$("body,html").animate({scrollTop:0},800)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
